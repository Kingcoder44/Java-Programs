package Divide_Conquer;

import Trees.Search;

import java.util.Arrays;
import java.util.Scanner;

public class SearchinRotatedSortedArray {
    public static void main(String[] args) {
        Scanner ob = new Scanner(System.in);
        int a[] = {5,6,7,8,9,10,1,2,3 };
        int k=ob.nextInt();
        System.out.println(Arrays.toString(a));
        System.out.println("Index of key "+k+" = "+search(a,0,a.length-1,k));
    }

    public static int search(int a[], int l, int h, int k) {
        int p = findPivot(a, l, h);
        if (p == -1) {
            return binarySearch(a, l, h, k);
        }
        if (a[p] == k) {
            return p;
        }
        if (a[l] <= k && k <= a[p]) {
            return binarySearch(a, l, p - 1, k);
        }
        return binarySearch(a, p + 1, h, k);
    }

    private static int findPivot(int[] a, int l, int h) {
        int m = l+(h-l)/2;
        if(l<=h)
        {
            if(l==h)
                return l;
            if(m<h && a[m]>a[m+1])
                return m;
            if(m>l && a[m]<a[m-1])
                return m-1;
            if(a[m]>=a[l])
               return  findPivot(a,m+1,h);
            if(a[m]<a[h])
                return findPivot(a,l,m-1);
        }
        return -1;
    }
    static int binarySearch(int[] arr, int low, int high, int key) {
        while (low <= high) {
            int mid = low + (high - low) / 2;
            if (arr[mid] == key) {
                return mid;
            }
            if (arr[mid] < key) {
                low = mid + 1;
            } else {
                high = mid - 1;
            }
        }
        return -1;
    }
}
